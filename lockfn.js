// Filename: LockFn.js
// Timestamp: 2013.06.20-19:22:04 (last modified)  
// Author(s): Bumblehead (www.bumblehead.com)
// Requires: 
//
// -------------------------------------------------------------------
// *.getValCaching* (PkCacheFunc)
//
// gets a value with getValFunc, then calls onValFunc(value)
// multiple requests made to this method are served
// the value that is once-only generated by onValFun
// 
// funcache = PkCacheFunc.getNew();
// funcache(valIWant, fn, function forGettingVal (cacheFunc) {
//   valIWant = "newValue";
//   cacheFunc(null, valIWant);
// });
//
// to clear it, simply create a new one.
// funcache = PkCacheFunc.getNew();
//
// -------------------------------------------------------------------
// *.getValCachingNamespace* (PkCacheFuncNamespace)
//
// not sure what it does
//
// -------------------------------------------------------------------
// *.getQueuing* (PkQueueFunc)
//
// this object stores mulitple callbacks and processes them one
// after another -waiting for the first to complete before calling
// the next, useful for holding off execution of function bodies that
// add numerous calls to the stack.
// 
// cacheFunc = PkQueueFunc.getNew();
// cacheFunc(callback, function (exitFn) {
//   x = 5;
//   exitFn(null, x);
// });
// 
// -------------------------------------------------------------------
// *.getRebounding* (CacheFirstFunc)
//
// mostly a clone of cachefunc
// first function is processed until a value is reached...
// all future calls are rebounded until first function completes
//
//
// -------------------------------------------------------------------
// *.getThrottling* (CacheQueueFuncThrottle)
//
// this object takes mulitple callbacks.
// it will process one callback and during a specified period of time it will 
// ignore callbacks that it recieves.
// 
// intended for functions bound to events that may be triggered many times
// in short time.
// 
// cacheFuncThrottle = CacheQueueFuncThrottle.getNew({ ms : 500 });
// cacheFuncThrottle(function () { console.log('go!') });
// 

var LockFnValCaching = require('./lib/lockfnvalcaching');
var LockFnValCachingNamespace = require('./lib/lockfnvalcaching');
var LockFnQueuing = require('./lib/lockfnqueuing');
var LockFnRebounding = require('./lib/lockfnrebounding');
var LockFnThrottling = require('./lib/lockfnthrottling');

var LockFn =
  ((typeof module === 'object') ? module : {}).exports = (function () {

  return {
    getValCaching : LockFnValCaching.getNew,
    getValCachingNamespace : LockFnValCachingNamespace.getNew,
    getQueuing : LockFnQueuing.getNew,
    getRebounding : LockFnRebounding.getNew,
    getThrottling : LockFnThrottling.getNew
  };

}());