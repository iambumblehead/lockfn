// Filename: LockFnCaching.js
// Timestamp: 2013.06.21-17:46:28 (last modified)  
// Author(s): Bumblehead (www.bumblehead.com)
//
// gets a value with getValFunc, then calls onValFunc(value)
// multiple requests made to this method are served
// the value that is once-only generated by onValFun
// 
// --------------------------------------------------------
// funcache = PkCacheFunc.getNew();
// funcache(valIWant, fn, function forGettingVal (cacheFunc) {
//   valIWant = "newValue";
//   cacheFunc(null, valIWant);
// });
//
// to clear it, create a new one.
// funcache = PkCacheFunc.getNew();
//
//

var LockFnCaching =
  ((typeof module === 'object') ? module : {}).exports = (function () {

  var cache = {
    val : null,
    isActive : false,
    funcArr : [],

    callFuncArr : function (err, blocks) {
      var that = this, funcArr = that.funcArr;
      that.isActive = false;
      while (funcArr.length) funcArr.pop()(err, blocks);
    },

    // persists the returned value with this object
    cacheVal : function (v, onValFunc, getValFunc) {
      var that = this, val = that.val;

      that.funcArr.push(onValFunc);
      if (that.isActive) return null;
      that.isActive = !val;

      if (val) return that.callFuncArr(null, val);

      getValFunc(function (err, newVal) {
        if (err) return that.callFuncArr(err, newVal);
        that.callFuncArr(err, (that.val = newVal));
      });
    }
  };

  return {
    getNew : function () {
      var that = Object.create(cache);
      that.isActive = false;
      that.funcArr = [];
      that.val = null;
      return function (val, onValFunc, getValFunc) { 
        that.cacheVal(val, onValFunc, getValFunc); 
      };
    }
  };

}());
