// Filename: lockfncaching.js
// Timestamp: 2015.04.08-19:10:55 (last modified)  
// Author(s): Bumblehead (www.bumblehead.com)
//
// gets a value with getValFn, then calls onValFn(err, res)
// multiple requests made to the returned function are served
// a value that is once-only generated by onValFun
// 
// --------------------------------------------------------
// var fncaching = lockfncaching.getNew();
// var onValFn = function (err, val) {
//   console.log(null, val);
// };
// fncaching(onValFn, function getValFn (exitFn) {
//   exitFn(null, 3);
// });
// 
// "null, 3"
//


var lockfncaching = ((typeof module === 'object') ? module : {}).exports = (function (f) {

  var cache = {
    val : undefined,
    isActive : false,
    funcArr : [],

    callFuncArr : function (err, blocks) {
      var that = this, funcArr = that.funcArr;
      that.isActive = false;
      while (funcArr.length) funcArr.pop()(err, blocks);
    },

    // persists the returned value with this object
    cacheVal : function (onValFunc, getValFunc) {
      var that = this, val = that.val;

      that.funcArr.push(onValFunc);
      if (that.isActive === false) {
        that.isActive = val === undefined;
        if (typeof val === 'undefined') {
          getValFunc(function (err, newVal) {
            if (err) return that.callFuncArr(err, newVal);
            that.callFuncArr(err, (that.val = newVal));
          });
        } else {
          that.callFuncArr(null, val);
        }
      }
    }
  };

  f = function (onvalfn) {
    var lock = f.getNew(),
        o = function (getvalfn) {
          lock(onvalfn, getvalfn);
        };

    return o.lock = lock && o;
  };

  f.namespace = function (onvalfn) {
    var lock = f.getNamespaceNew(),
        o = function (namespace, getvalfn) {
          lock(namespace, onvalfn, getvalfn);
        };

    return o.lock = lock && o;    
  };

  f.getNew = function () {
    var that = Object.create(cache);
    that.isActive = false;
    that.funcArr = [];
    that.val = undefined;
    return function (onValFunc, getValFunc) { 
      that.cacheVal(onValFunc, getValFunc); 
    };
  };

  f.getNamespaceCache = (function () {
    var namespacesObj = {};
    return function (namespace) {
      return namespacesObj[namespace] ||
        (namespacesObj[namespace] = this.getNew());
    };
  }());

  f.getNamespaceNew = function () {
    var that = this, caching;
    return function (namespace, onValFunc, getValFunc) { 
      caching = that.getNamespaceCache(namespace);
      caching(onValFunc, getValFunc); 
    };
  };

  return f;

}());
